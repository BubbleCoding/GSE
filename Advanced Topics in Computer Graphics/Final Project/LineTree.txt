var createScene = async function () {

    var scene = new BABYLON.Scene(engine);
    var camera = new BABYLON.FreeCamera("camera1", new BABYLON.Vector3(0, 10, -20), scene);
    camera.setTarget(BABYLON.Vector3.Zero());
    camera.attachControl(canvas, true);
    var light = new BABYLON.HemisphericLight("light1", new BABYLON.Vector3(0, 1, 0), scene);
    light.intensity = 0.7;

    var treeBranches = [];
    const treeColors = []
    var startPos = new BABYLON.Vector3(0,1,0);
    var stepSize = 1;
    var branches = 2;
    var maxDepth = 5;
    var colorBalance = 255/maxDepth-2;
    var random = 1;
    var test = 0;
    if(random == 1){
        var r1 = Math.random()*1000;
        var r2 = Math.random()*10000;
        var r3 = Math.random()*5000;
        var r4 = Math.random()*7500;
    }else{
        var r1 = 650;;
        var r2 = 8000;
        var r3 = 5841;
        var r4 = 7500;
    }

    function fract(num){
        return (num - Math.floor(num));
    }
    function noise(x,y,z){
        test += 0.0001;
        return fract(Math.sin(x*r1*test+y*r2*test+z*r3*test)*r4);
    }
    function branch(numberOfLines, branchStartPosition, depth, color){
        var x = branchStartPosition.x;
        var y = branchStartPosition.y;
        var z = branchStartPosition.z;
        var branchList = [branchStartPosition,];
        var colorList = [color,]
        for(var i=0;i<numberOfLines;i++){
            x += noise(x,y,z)*stepSize*2-stepSize;
            y += noise(x,y,z)*stepSize;
            z += noise(x,y,z)*stepSize*2-stepSize;
            var vec = new BABYLON.Vector3(x,y,z);
            branchList.push(vec);
            console.log(depth*colorBalance);
            var colorLoc = new BABYLON.Color4(0, noise(x,y,z), noise(x,y,z), 1);
            colorList.push(colorLoc);
        }
        treeBranches.push(branchList);
        treeColors.push(colorList);
        branchAttachment(vec, depth,colorLoc);
    }

    function branchAttachment(branchAttachmentPosition, depth, color){
        depth++;
        if(depth>maxDepth){
            return;
        }
        //console.log(depth);
        for (var i = 0 ; i < branches; i++){
            branch(5, branchAttachmentPosition, depth, color);
        }
    }

    const sphere = BABYLON.MeshBuilder.CreateSphere("sphere", {diameter: 0.1 });
    
    branchAttachment(startPos,0,new BABYLON.Color4(0, 0, 0, 1));
    let linesystem = BABYLON.MeshBuilder.CreateLineSystem("linesystem", {lines: treeBranches, updatable: true, colors: treeColors}, scene); 
    const env = scene.createDefaultEnvironment();

    const xr = await scene.createDefaultXRExperienceAsync({
        floorMeshes: [env.ground]
    });

    return scene;
};